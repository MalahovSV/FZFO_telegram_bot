-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.employements
(
    employement_id integer NOT NULL DEFAULT nextval('employements_employement_id_seq'::regclass),
    student_id integer,
    employer_id integer,
    CONSTRAINT employements_pkey PRIMARY KEY (employement_id),
    CONSTRAINT employements_student_id_key UNIQUE (student_id)
);

CREATE TABLE IF NOT EXISTS public.employers
(
    employer_id integer NOT NULL DEFAULT nextval('employers_employer_id_seq'::regclass),
    name_employer character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT employers_pkey PRIMARY KEY (employer_id),
    CONSTRAINT employers_name_employer_key UNIQUE (name_employer)
);

CREATE TABLE IF NOT EXISTS public.form_studies
(
    form_study_id integer NOT NULL DEFAULT nextval('form_studies_form_study_id_seq'::regclass),
    name_form_study character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT form_studies_pkey PRIMARY KEY (form_study_id)
);

CREATE TABLE IF NOT EXISTS public.groups_student
(
    group_id integer NOT NULL DEFAULT nextval('groups_student_group_id_seq'::regclass),
    name_group character varying(10) COLLATE pg_catalog."default" NOT NULL,
    start_studies date,
    speciality_id integer NOT NULL,
    form_study_id integer NOT NULL,
    CONSTRAINT groups_student_pkey PRIMARY KEY (group_id),
    CONSTRAINT groups_student_name_group_key UNIQUE (name_group)
);

CREATE TABLE IF NOT EXISTS public.level_education
(
    level_id integer NOT NULL DEFAULT nextval('level_education_level_id_seq'::regclass),
    name_level character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT level_education_pkey PRIMARY KEY (level_id)
);

CREATE TABLE IF NOT EXISTS public.sessions
(
    session_id integer NOT NULL DEFAULT nextval('sessions_session_id_seq'::regclass),
    start_session date,
    end_session date,
    group_id integer,
    type_session_id integer,
    CONSTRAINT sessions_pkey PRIMARY KEY (session_id)
);

CREATE TABLE IF NOT EXISTS public.specialities
(
    speciality_id integer NOT NULL DEFAULT nextval('specialities_speciality_id_seq'::regclass),
    name_speciality character varying(100) COLLATE pg_catalog."default",
    code_speciality character varying(8) COLLATE pg_catalog."default",
    level_id integer,
    CONSTRAINT specialities_pkey PRIMARY KEY (speciality_id)
);

CREATE TABLE IF NOT EXISTS public.stored_documents
(
    document_id integer NOT NULL DEFAULT nextval('stored_documents_document_id_seq'::regclass),
    session_id integer,
    student_id integer,
    date_document date,
    CONSTRAINT stored_documents_pkey PRIMARY KEY (document_id)
);

CREATE TABLE IF NOT EXISTS public.students
(
    student_id integer NOT NULL DEFAULT nextval('students_student_id_seq'::regclass),
    surname character varying(40) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(40) COLLATE pg_catalog."default" NOT NULL,
    second_name character varying(40) COLLATE pg_catalog."default",
    group_id integer,
    CONSTRAINT students_pkey PRIMARY KEY (student_id)
);

CREATE TABLE IF NOT EXISTS public.type_sessions
(
    type_session_id integer NOT NULL DEFAULT nextval('type_sessions_type_session_id_seq'::regclass),
    name_type_session character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT type_sessions_pkey PRIMARY KEY (type_session_id),
    CONSTRAINT type_sessions_name_type_session_key UNIQUE (name_type_session)
);

CREATE TABLE IF NOT EXISTS public.users_tgb
(
    user_tgb_id integer NOT NULL DEFAULT nextval('users_tgb_user_tgb_id_seq'::regclass),
    login_tgb character varying(40) COLLATE pg_catalog."default" NOT NULL,
    password_tgb character varying(40) COLLATE pg_catalog."default" NOT NULL,
    id_telegram character varying(40) COLLATE pg_catalog."default",
    student_id integer,
    CONSTRAINT users_tgb_pkey PRIMARY KEY (user_tgb_id),
    CONSTRAINT users_tgb_id_telegram_key UNIQUE (id_telegram),
    CONSTRAINT users_tgb_login_tgb_key UNIQUE (login_tgb),
    CONSTRAINT users_tgb_student_id_key UNIQUE (student_id)
);

ALTER TABLE IF EXISTS public.employements
    ADD CONSTRAINT employements_employer_id_fkey FOREIGN KEY (employer_id)
    REFERENCES public.employers (employer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.employements
    ADD CONSTRAINT employements_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (student_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS employements_student_id_key
    ON public.employements(student_id);


ALTER TABLE IF EXISTS public.groups_student
    ADD CONSTRAINT groups_student_form_study_id_fkey FOREIGN KEY (form_study_id)
    REFERENCES public.form_studies (form_study_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.groups_student
    ADD CONSTRAINT groups_student_speciality_id_fkey FOREIGN KEY (speciality_id)
    REFERENCES public.specialities (speciality_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.sessions
    ADD CONSTRAINT sessions_group_id_fkey FOREIGN KEY (group_id)
    REFERENCES public.groups_student (group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.sessions
    ADD CONSTRAINT sessions_type_session_id_fkey FOREIGN KEY (type_session_id)
    REFERENCES public.type_sessions (type_session_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.specialities
    ADD CONSTRAINT "FK_level_id" FOREIGN KEY (level_id)
    REFERENCES public.level_education (level_id) MATCH SIMPLE
    ON UPDATE SET NULL
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public.stored_documents
    ADD CONSTRAINT stored_documents_session_id_fkey FOREIGN KEY (session_id)
    REFERENCES public.sessions (session_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stored_documents
    ADD CONSTRAINT stored_documents_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (student_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.students
    ADD CONSTRAINT students_group_id_fkey FOREIGN KEY (group_id)
    REFERENCES public.groups_student (group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users_tgb
    ADD CONSTRAINT users_tgb_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (student_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS users_tgb_student_id_key
    ON public.users_tgb(student_id);

END;